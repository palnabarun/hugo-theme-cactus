<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on Cactus theme example</title><link>https://www.takuzen.me/hugo-theme-cactus/tags/algorithms/</link><description>Recent content in Algorithms on Cactus theme example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>You</copyright><lastBuildDate>Sat, 06 Jun 2020 09:00:00 +0000</lastBuildDate><atom:link href="https://www.takuzen.me/hugo-theme-cactus/tags/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>Changes to String in java (from 1.7.0_06)</title><link>https://www.takuzen.me/hugo-theme-cactus/posts/2020-06-06-changes-in-java-string/</link><pubDate>Sat, 06 Jun 2020 09:00:00 +0000</pubDate><guid>https://www.takuzen.me/hugo-theme-cactus/posts/2020-06-06-changes-in-java-string/</guid><description>Before 1.7.0_06, String has 4 non static field:
char[] value int[] offset int count int hash Subing.substring create a String by sharing the original String&amp;rsquo;s internal char[] value and setting offset. This saves memory and makes String.substring run in a constant time($O(1)$). Meanwhile, this feature may cause memory leak1.
http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 public final class String implements java.</description></item><item><title>Algorithms - Graphs</title><link>https://www.takuzen.me/hugo-theme-cactus/posts/2020-05-01-algorithms-graphs/</link><pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate><guid>https://www.takuzen.me/hugo-theme-cactus/posts/2020-05-01-algorithms-graphs/</guid><description>Undirected Graphs Some problems Path Shortest path Cycle Ehler tour: A cycle that uses each edge excatly once. Hamilton tour: A cycle that uses each vertex exactly once classical NP-complete problem. Connectivity MST: Biconnectivity: A vertex whose removal disconnects the graph Planarity Graph isomorphism: Are two graphs identical? No one knows so far. A lonstanding open problem Representations Real-world graphs tend to be sparse (huge number of vertices, small average vertex degree).</description></item><item><title>java散列知识点总结</title><link>https://www.takuzen.me/hugo-theme-cactus/posts/2017-02-18-hash/</link><pubDate>Sat, 18 Feb 2017 19:19:01 +0000</pubDate><guid>https://www.takuzen.me/hugo-theme-cactus/posts/2017-02-18-hash/</guid><description>java 的根类 Object 具有 hashcode 方法。当 equal 方法被重写时也应当重写 hashcode 方法。
基本数据类型的散列码 byte short int char 类型的搜索键将会转换为 int。 float 类型的搜索键使用 Float.floatToIntBits(key) 作为散列码。 long 类型的搜索键会进行折叠操作，如下： 1 iny hashCode = (int) (key ^ (key &amp;gt;&amp;gt; 32)); double 类型的搜索键会使用 Double.doubleToLongBits(key) 方法转换为 long 类型然后再进行折叠。 字符串类型的散列码 对于字符串一般使用多项式散列码进行计算，
这里放个公式的图
b的较好取值为31，33，37，39，41。在 java String 类中 b 取31。
1 2 3 4 5 6 7 8 9 10 11 12 13 public static int hash(String key, int tableSize) { int hashVal = 0; for (int i = 0; i &amp;lt; key.</description></item></channel></rss>